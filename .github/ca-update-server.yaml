name: Case Manager Code Quality

on: pull_request
concurrency:
  group: self-aws-hosted-${{ github.head_ref || github.ref }}-${{ github.base_ref }}
  cancel-in-progress: true

env:
  GOPATH: /root/cm/appdata/godata
  GOCACHE: /root/cm/appdata/godata/cache
  HOME: /root/

jobs:
  start-runner:
    name: Start a self-hosted EC2 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ${{ secrets.AWS_EC2_IMAGE_ID}}
          ec2-instance-type: ${{ secrets.AWS_EC2_INSTANCE_TYPE}}
          subnet-id: ${{ secrets.AWS_SUBNET_ID }}
          security-group-id: ${{ secrets.AWS_SECURITY_GROUP_ID }}
          runner-home-dir: /root/cm/github-runner/
          aws-resource-tags: > # optional, requires additional permissions
            [
              {"Key": "Name", "Value": "CaseManager-Github-EC2-Runners"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"},
              {"Key": "GitHubWorkflow", "Value": "Case-Manager-Code-Quality"},
              {"Key": "Project", "Value": "CaseManager"}
            ]
  unit-tests:
    name: Linting and unit testing the case manager app
    if: false
    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner
    needs: start-runner # required to get output from the start-runner job
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub."
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Workaround the missing path environments
        run: |
          echo -n "/root/.nvm/versions/node/v14.20.0/bin:" >> $GITHUB_PATH
          echo -n "/usr/local/go/bin" >> $GITHUB_PATH
      - name: Check out the repository code
        uses: actions/checkout@v2
        with:
          clean: false

      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      - name: Set the app configuration on the right location
        run: cp /root/cm/appdata/app.ini ./custom/conf/

      - run: echo "üñ•Ô∏è The workflow is now ready to start linting and unit testing the ${{ github.repository }} code."

      - name: Run lint
        run: make lint

      - name: Run unit tests
        run: make test

  build:
    name: Building the case manager app
    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner
    needs:
      - start-runner # required to get output from the start-runner job
    #- unit-tests
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub."
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Workaround the missing path environments
        run: |
          echo -n "/root/.nvm/versions/node/v14.20.0/bin:" >> $GITHUB_PATH
          echo -n "/usr/local/go/bin" >> $GITHUB_PATH
      - name: Check out the repository code
        uses: actions/checkout@v2
        with:
          clean: false

      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      - name: Set the app configuration on the right location
        run: cp /root/cm/appdata/app.ini ./custom/conf/

      - run: echo "üñ•Ô∏è The workflow is now ready to start building the ${{ github.repository }} code."

      - name: Build the app
        run: TAGS="bindata" make build

  contract-tests:
    name: Testing the api contract between the case manager and the launcher app
    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner
    needs:
      - start-runner # required to get output from the start-runner job
      - build
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub."
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Workaround the missing path environments
        run: |
          echo -n "/root/.nvm/versions/node/v14.20.0/bin:" >> $GITHUB_PATH
          echo -n "/usr/local/go/bin" >> $GITHUB_PATH
      - name: Check out the repository code
        uses: actions/checkout@v2
        with:
          clean: false

      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      - name: Set the app configuration on the right location
        run: cp /root/cm/appdata/app.ini ./custom/conf/

      - run: echo "üñ•Ô∏è The workflow is now ready to start building the ${{ github.repository }} code."

      - name: Install node packages
        run: |
          cd testing
          yarn install
      - run: echo "üñ•Ô∏è The workflow is now ready to start contract tests of the ${{ github.repository }} code."

      - name: Run and test the app
        run: |
          ./gitea web &
          PID1=$!
          wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 20 http://localhost:3000/api/swagger
          curl -I http://localhost:3000/api/swagger
          cd ./testing
          yarn start &
          PID2=$!
          newman run ./contracts/tests/CM_Launcher_Contract_CI_Flow.postman_collection.json \
          -g ./envs/CM_Local.postman_environment.json \
          --global-var "COGNITO_USER_EMAIL=${{ secrets.COGNITO_USER_EMAIL }}" \
          --global-var "COGNITO_USER_PASSWORD=${{ secrets.COGNITO_USER_PASSWORD }}" \
          --global-var "COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID }}" \
           -r 'cli,htmlextra' --reporter-htmlextra-export ./reports/contracts/cm_launcher.html
          kill $PID1 $PID2
      - name: Publish the reports on GitHub
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: cm-contracts-local-testing-reports
          path: |
            testing/reports/contracts
  stop-runner:
    name: Stop the self-hosted EC2 runner
    needs:
      - start-runner # required to get output from the start-runner job
      - unit-tests
      - build
      - contract-tests
    runs-on: ubuntu-latest
    if: always() # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
